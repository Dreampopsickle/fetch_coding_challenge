---TRIM columns to clean and format standardization
---Seperate "receiptItemList" to own table
CREATE OR REPLACE TABLE `fetch-coding-challenge.fetch_data_clean_stg.receipt_items_stg` AS 
WITH flattened AS (
  SELECT
    TRIM(_id) AS receipt_id,
    TRIM(item.metabriteCampaignId) AS meta_brite_campaign_id,
    item.priceAfterCoupon AS price_after_coupon, 
    item.deleted AS deleted,
    item.originalFinalPrice AS original_final_price,
    item.competitiveProduct AS competative_product,
    item.pointsEarned AS points_earned,
    item.originalMetaBriteQuantityPurchased AS original_meta_brite_quantity_purchased,
    TRIM(item.competitorRewardsGroup) AS competitor_rewards_group,
    item.itemNumber AS item_number,
    item.originalMetaBriteBarcode AS original_meta_brite_barcode,
    TRIM(item.brandCode) AS brand_code,
    TRIM(item.rewardsProductPartnerId) AS rewards_product_partner_id,
    item.discountedItemPrice AS discounted_item_price,
    TRIM(item.originalMetaBriteDescription) AS original_meta_brite_description,
    TRIM(item.userFlaggedDescription) AS user_flagged_description,
    TRIM(item.rewardsGroup) AS rewards_group,
    TRIM(item.needsFetchReviewReason) AS needs_fetch_review_reason,
    item.userFlaggedQuantity AS user_flagged_quantity,
    TRIM(item.pointsPayerId) AS points_payer_id,
    item.targetPrice AS target_price,
    TRIM(item.pointsNotAwardedReason) AS points_not_awarded_reason,
    item.userFlaggedPrice AS user_flagged_price,
    item.finalPrice AS final_price,
    item.originalMetaBriteItemPrice AS original_meta_brite_item_price,
    item.userFlaggedNewItem AS user_flagged_new_item,
    item.quantityPurchased AS quantity_purchased,
    item.userFlaggedBarcode AS user_flagged_barcode,
    item.preventTargetGapPoints AS prevent_target_gap_points,
    item.partnerItemId AS partner_item_id,
    item.barcode AS barcode,
    item.needsFetchReview AS needs_fetch_review,
    item.itemPrice AS item_price,
    TRIM(item.originalReceiptItemText) AS original_receipt_item_text,
    TRIM(item.description) AS description
  FROM `fetch-coding-challenge.fetch_data.receipts`, UNNEST(rewardsReceiptItemList) AS item
),

receipt_items AS (
  SELECT
    receipt_id,
    GENERATE_UUID() as receipt_item_id,
    meta_brite_campaign_id,
    price_after_coupon, 
    deleted,
    original_final_price,
    competative_product,
    points_earned,
    original_meta_brite_quantity_purchased,
    competitor_rewards_group,
    item_number,
    original_meta_brite_barcode,
    brand_code,
    rewards_product_partner_id,
    discounted_item_price,
    original_meta_brite_description,
    user_flagged_description,
    rewards_group,
    needs_fetch_review_reason,
    user_flagged_quantity,
    points_payer_id,
    target_price,
    points_not_awarded_reason,
    user_flagged_price,
    final_price,
    original_meta_brite_item_price,
    user_flagged_new_item,
    quantity_purchased,
    user_flagged_barcode,
    prevent_target_gap_points,
    partner_item_id,
    CAST(barcode AS INT64) AS barcode,
    needs_fetch_review,
    item_price,
    original_receipt_item_text,
    description
  FROM flattened
)

SELECT * FROM receipt_items